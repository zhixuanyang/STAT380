# add in features #
###################
setkey(master,id)
setkey(card_tab,id)
card_tab$Legendary <- 0
card_tab$Legendary[grep("Legendary", card_tab$supertypes)] <- 1
types_tab <- as.data.table(tstrsplit(card_tab$types," "))
types_tab$id <- card_tab$id
types_tab
m_types_tab <- melt(types_tab,id.vars = "id")
m_types_tab
m_types_tab <- m_types_tab[!is.na(m_types_tab$value)]
m_types_tab$True <- 1
types_tab <- dcast(m_types_tab,id ~ value,length,value.var="True")
types_tab
master
master <- merge(master,card_tab[,.(id,rarity,Legendary)],all.x=T)
master
master <- merge(master,types_tab,all.x=T)
master
master$current_price[is.na(master$current_price)] <- mean(master$current_price, na.rm = T)
master
master[is.na(master)] <- 0
############################
# split back to train/test #
############################
# split
train <- master[train==1]
test <- master[train==0]
# clean up columns
train$train <- NULL
test$train <- NULL
test$future_price <- NULL
########################
# write out to interim #
########################
fwrite(train,file.path(interim_data_path,"train_v1.csv"))
fwrite(test,file.path(interim_data_path,"test_v1.csv"))
rm(list = ls())
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
install.packages(glmnet)
install.packages("glmnet")
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
rm(list = ls())
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
View(test)
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
View(train)
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
#train_y <- train$future_price
#train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
View(dummies)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
train <- as.matrix(train)
train
View(train)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
View(train)
train <- predict(dummies, newdata = train)
test <- data.table(test)
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
bestlam <- gl_model$lambda.min
log(bestlam)
#fit a logistic model
gl_model <- glmnet(train, train_y, alpha = 1,family="gaussian")
plot(gl_model)
#save model
saveRDS(gl_model,".gl_model.model")
test <- as.matrix(test)
View(test)
#use the full model
pred <- predict(gl_model, s = bestlam, newx = test)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
########################
# Use cross validation #
########################
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
bestlam <- gl_model$lambda.min
log(bestlam)
####################################
# fit the model to all of the data #
####################################
#now fit the full model
#fit a logistic model
gl_model <- glmnet(train, train_y, alpha = 1,family="gaussian")
plot(gl_model)
#save model
saveRDS(gl_model,".gl_model.model")
test <- as.matrix(test)
#use the full model
pred <- predict(gl_model, s = bestlam, newx = test)
View(pred)
example_sub$future_price <- pred
example_sub
#now we can write out a submission
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
########################
# Use cross validation #
########################
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
bestlam <- gl_model$lambda.min
log(bestlam)
####################################
# fit the model to all of the data #
####################################
#now fit the full model
#fit a logistic model
gl_model <- glmnet(train, train_y, alpha = 1,family="gaussian")
plot(gl_model)
#save model
saveRDS(gl_model,".gl_model.model")
test <- as.matrix(test)
#use the full model
pred <- predict(gl_model, s = bestlam, newx = test)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
View(train)
View(test)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
bestlam <- gl_model$lambda.min
log(bestlam)
#fit a logistic model
gl_model <- glmnet(train, train_y, alpha = 1,family="gaussian")
plot(gl_model)
#save model
saveRDS(gl_model,".gl_model.model")
test <- as.matrix(test)
#use the full model
pred <- predict(gl_model, s = bestlam, newx = test)
example_sub$future_price <- pred
example_sub
#now we can write out a submission
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
########################
# Use cross validation #
########################
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
year_num
View(train)
View(train)
rm(list = ls())
library(data.table)
library(caret)
library(Metrics)
library(glmnet)
library(plotmo)
library(lubridate)
interim_data_path = "~/Desktop/STAT380/themagic/project/volume/data/interim/"
model_path ="~/Desktop/STAT380/themagic/project/volume/models/"
submission_path = "~/Desktop/STAT380/themagicproject/volume/data/processed/"
raw_path = "~/Desktop/STAT380/themagic/project/volume/data/raw/"
train = fread(file.path(interim_data_path,"train_v1.csv"))
test = fread(file.path(interim_data_path,"test_v1.csv"))
example_sub = fread(file.path(raw_path,"example_submission.csv"))
test$future_price <- 0
year_num <- as.numeric(as.factor(year(as_date(train$current_date))))
# subset out only the columns to model
train
test
drops <-  c('id','future_date','current_date')
train <- train[, !drops, with = FALSE]
train
test <- test[, !drops, with = FALSE]
test
#save the response var because dummyVars will remove
train_y <- train$future_price
train_y
# work with dummies
dummies  <-  dummyVars(future_price ~ ., data = train)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
train <- data.table(train)
test <- data.table(test)
########################
# Use cross validation #
########################
train <- as.matrix(train)
train
?cv.glmnet
?glmnet
gl_model <- cv.glmnet(train, train_y, alpha = 1, family = "gaussian", foldid = year_num, nfolds = length(unique(year_num)))
plot(gl_model)
